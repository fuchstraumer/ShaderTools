---

resource_groups : {
    GlobalResources : {
        matrices : {
            Type : "UniformBuffer"
        },
        globals : {
            Type : "UniformBuffer"
        }
    },
    Material : {
        Tags : {
            "MaterialGroup"
        },
        MaterialParameters : {
            Type : "UniformBuffer"
        },
        AlbedoMap : {
            Type : "SampledImage"
        },
        NormalMap : {
            Type : "SampledImage"
        },        
        AmbientOcclusionMap : {
            Type : "SampledImage"
        },
        MetallicRoughnessMap : {
            Type : "SampledImage"
        },
        EmissiveMap : {
            Type : "SampledImage"
        },
        LinearRepeatSampler : {
            Type : "Sampler"
        },
        LinearClampSampler : {
            Type : "Sampler"
        },
        AnisotropicSampler : {
            Type : "Sampler"
        }
    },
    VolumetricForward : {
        ClusterData : {
            Type : "UniformBuffer"
        },
        ClusterAABBs : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "readonly"
            }
        },
        ClusterFlags : {
            Type : "StorageTexelBuffer",
            Format : "r8ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                FindUniqueClusters : "readonly",
                ClusterSamples : "writeonly"
            }
        },
        PointLightIndexList : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "writeonly",
                Clustered : "readonly"
            }
        },
        SpotLightIndexList : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "writeonly",
                Clustered : "readonly"
            }
        },
        PointLightGrid : {
            Type : "StorageTexelBuffer",
            Format : "rg32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "writeonly",
                Clustered : "readonly"
            }
        },
        SpotLightGrid : {
            Type : "StorageTexelBuffer",
            Format : "rg32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "writeonly",
                Clustered : "readonly"
            }
        },
        PointLightIndexCounter : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        },
        SpotLightIndexCounter : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        },
        UniqueClustersCounter : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                UpdateClusterIndirectArgs : "readonly"
            }
        },
        UniqueClusters : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "readonly",
                FindUniqueClusters : "writeonly"
            }
        }
    },
    VolumetricForwardLights : {
        LightCounts : {
            Type : "UniformBuffer"
        },
        PointLights : {
            Type : "StorageBuffer",
            # PerUsageQualifiers: qualifiers to apply only to single shaders in the pack
            # Other qualifiers are applied pack-wide
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                Clustered : "readonly",
                ReduceLightsAABB : "readonly",
                ComputeMortonCodes : "readonly",
                AssignLightsToClustersBVH : "readonly"
            }
        },
        SpotLights : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                Clustered : "readonly",
                ReduceLightsAABB : "readonly",
                ComputeMortonCodes : "readonly",
                AssignLightsToClustersBVH : "readonly"
            }
        },
        DirectionalLights : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                Clustered : "readonly",
                ReduceLightsAABB : "readonly",
                ComputeMortonCodes : "readonly"
            }
        }
    },
    IndirectArgsSet : {
        IndirectArgs : {
            Type : "StorageBuffer",
            Qualifiers : "restrict"
        }       
    },
    SortResources : {
        DispatchParams : {
            Type : "UniformBuffer"
        },
        ReductionParams : {
            Type : "UniformBuffer"
        },
        SortParams : {
            Type : "UniformBuffer"
        },
        LightAABBs : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                ComputeMortonCodes : "readonly"
            }
        },
        PointLightMortonCodes : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        },
        SpotLightMortonCodes : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        },
        PointLightIndices : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        },
        SpotLightIndices : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict"
        }
    },
    MergeSortResources : {
        InputKeys : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict readonly"
        },
        InputValues : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict readonly"
        },
        OutputKeys : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict writeonly"
        },
        OutputValues : {
            Type : "StorageTexelBuffer",
            Format : "r32ui",
            Qualifiers : "restrict writeonly"
        }, 
        MergePathPartitions : {
            Type : "StorageTexelBuffer",
            Format : "r32i",
            Qualifiers : "restrict"
        }
    },
    BVHResources : {
        BVHParams : {
            Type : "UniformBuffer"
        },
        PointLightBVH : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "readonly"
            }
        },
        SpotLightBVH : {
            Type : "StorageBuffer",
            Qualifiers : "restrict",
            PerUsageQualifiers : {
                AssignLightsToClustersBVH : "readonly"
            }
        }
    },
    Debug : {
        ClusterColors : {
            Type : "StorageTexelBuffer",
            Format : "rgba8",
            Qualifiers : "restrict readonly"
        }
    }
}

shader_groups : {
    UpdateLights : {
        Shaders : {
            Compute : "compute/UpdateLights.comp"
        }
    },
    ReduceLights : {
        Shaders : {
            Compute : "compute/ReduceLightsAABB.comp"
        }
    },
    ComputeMortonCodes : {
        Shaders : {
            Compute : "compute/ComputeMortonCodes.comp"
        }
    },
    RadixSort : {
        Shaders : {
            Compute : "compute/RadixSort.comp"
        }
    },
    MergeSort : {
        Shaders : {
            Compute : "compute/MergeSort.comp"
        }
    },
    BuildBVH : {
        Shaders : {
            Compute : "compute/BuildBVH.comp"
        }
    },
    DepthPrePass : {
        Shaders : {
            Vertex : "Default.vert",
            Fragment : "PrePass.frag"
        },
        # Use DepthOnly tag to force front-end to attach a depth stencil output
        # These shaders probably don't write to the backbuffer for color, but
        # we want to keep depth info.
        Tags : { "DepthOnly" }
    },
    ClusterSamples : {
        Shaders : {
            Vertex : "Default.vert",
            Fragment : "ClusterSamples.frag"
        },
        Tags : { "DepthOnlyAsInput" }
    },
    FindUniqueClusters : {
        Shaders : {
            Compute : "compute/FindUniqueClusters.comp"
        }
    },
    UpdateClusterIndirectArgs : {
        Shaders : {
            Compute : "compute/UpdateClusterIndirectArgs.comp"
        }
    },
    AssignLightsToClusters : {
        Shaders : {
            Compute : "compute/AssignLightsToClustersBVH.comp"
        },
        Extensions : {
            "GL_EXT_control_flow_attributes"
        }
    },
    DrawPass : {
        Shaders : {
            Vertex : "Default.vert",
            Fragment : "Clustered.frag"
        },
        # Draw pass reads depth but has no ability to write to it
        Tags : { "DepthOnlyAsInput" }
    },
    # Run before everything else, but only once per window resizing
    # So I'm putting it down here
    ComputeClusterAABBs : {
        Shaders : {
            Compute : "compute/ComputeClusterAABBs.comp"
        }
    },
    DebugClusters : {
        Shaders : {
            Vertex : "debug/DebugClusters.vert",
            Geometry : "debug/DebugClusters.geom",
            Fragment : "debug/DebugClusters.frag"
        },
        Extensions : {
            "GL_EXT_control_flow_attributes"
        }
    }
}
