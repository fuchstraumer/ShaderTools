
#include "Structures.glsl"
#include "Functions.glsl"

#pragma USE_RESOURCES VolumetricForward
#pragma USE_RESOURCES SortResources
#pragma USE_RESOURCES BVHResources
#pragma USE_RESOURCES VolumetricForwardLights

layout (local_size_x = 32u, local_size_y = 1u, local_size_z = 1u) in;
SPC const uint MaxLights = 4096u;

const uint NumChildNodes[6] = {
    1u,
    33u,
    1057u,
    33825u,
    1082401u,
    34636833u
};

// 32 layers of nodes
shared uint gs_NodeStack[1024]; 
// Current index in the above node stack
shared uint gs_StackPtr;
// The index of the parent node of the BVH node currently being processed
shared uint gs_ParentIdx;

shared uint gs_ClusterIndex1D;
shared AABB gs_ClusterAABB;
shared uint gs_PointLightCount;
shared uint gs_SpotLightCount;
shared uint gs_PointLightStartOffset;
shared uint gs_SpotLightStartOffset;
shared uint gs_PointLightList[MaxLights];
shared uint gs_SpotLightList[MaxLights];

void PushNode(in uint node_index)
{
    uint stack_idx = uint(atomicAdd(gs_StackPtr, 1));
    if (stack_idx < 1024u)
    {
        gs_NodeStack[stack_idx] = node_index;
    }
}

uint PopNode()
{
    uint stack_idx = uint(atomicAdd(gs_StackPtr, -1));
    uint node_idx = 0u;
    if (stack_idx > 0u && stack_idx < 1024u)
    {
        node_idx = gs_NodeStack[stack_idx - 1];
    }

    return node_idx;
}

// Gets the index of the first node in the current bvh
uint GetFirstChild(in uint num_levels)
{
    return (num_levels > 0u) ? gs_ParentIdx * 32u + 1u : 0u;
}

bool IsLeafNode(in uint child_index, in uint num_levels)
{
    return (num_levels > 0u) ? child_index > (NumChildNodes[num_levels - 1u] - 1u) : true;
}

uint GetLeafIndex(in uint node_index, in uint num_levels)
{
    return (num_levels > 0u) ? node_index - NumChildNodes[num_levels - 1] : node_index;
}

void main() {

    if (gl_LocalInvocationIndex == 0u)
    {
        gs_ParentIdx = 0;
        gs_StackPtr = 0u;
        gs_PointLightCount = 0u;
        gs_SpotLightCount = 0u;
        gs_ClusterIndex1D = imageLoad(UniqueClusters, int(gl_WorkGroupID.x)).r;
        gs_ClusterAABB.Min = ClusterAABBs.Data[gs_ClusterIndex1D].Min;
        gs_ClusterAABB.Max = ClusterAABBs.Data[gs_ClusterIndex1D].Max;
        PushNode(0u);
    }
    
    groupMemoryBarrier();
    barrier();

    uint childIndex = 0u;
    uint leafIndex = 0u;

    for(;;)
    {
        uint child_index = GetFirstChild(BVHParams.PointLightLevels) + gl_LocalInvocationIndex;

        if (IsLeafNode(child_index, BVHParams.PointLightLevels))
        {
            uint leaf_index = GetLeafIndex(child_index, BVHParams.PointLightLevels);

            if (leaf_index < LightCounts.NumPointLights)
            {
                uint light_index = imageLoad(PointLightIndices, int(leaf_index)).r;
                Sphere sphere;
                sphere.c = PointLights.Data[light_index].PositionViewSpace.xyz;
                sphere.r = PointLights.Data[light_index].Range;

                if (SphereInsideAABB(sphere, gs_ClusterAABB))
                {
                    uint idx = atomicAdd(gs_PointLightCount, 1u);
                    gs_PointLightList[idx] = light_index;
                }
            }
        }
        else if (AABBIntersectAABB(gs_ClusterAABB, PointLightBVH.Data[child_index]))
        {
            PushNode(child_index);
        }

        groupMemoryBarrier();
        barrier();

        if (gl_LocalInvocationIndex == 0u)
        {
            gs_ParentIdx = PopNode();
        }

        groupMemoryBarrier();
        barrier();

        if (gs_ParentIdx == 0u)
        {
            break;
        }

    }

    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex == 0u)
    {
        gs_StackPtr = 0u;
        gs_ParentIdx = 0u;
        PushNode(0u);
    }

    groupMemoryBarrier();
    barrier();

    for(;;)
    {
        uint child_index = GetFirstChild(BVHParams.SpotLightLevels) + gl_LocalInvocationIndex;

        if (IsLeafNode(child_index, BVHParams.SpotLightLevels))
        {
            uint leaf_index = GetLeafIndex(child_index, BVHParams.SpotLightLevels);

            if (leaf_index < LightCounts.NumSpotLights)
            {
                uint light_index = imageLoad(SpotLightIndices, int(leaf_index)).r;

                Sphere sphere;
                sphere.c = SpotLights.Data[light_index].PositionViewSpace.xyz;
                sphere.r = SpotLights.Data[light_index].Range;

                if (SphereInsideAABB(sphere, gs_ClusterAABB))
                {
                    uint idx = atomicAdd(gs_SpotLightCount, 1u);
                    gs_SpotLightList[idx] = light_index;
                }
            }
        }
        else if (AABBIntersectAABB(gs_ClusterAABB, SpotLightBVH.Data[child_index]))
        {
            PushNode(child_index);
        }

        groupMemoryBarrier();
        barrier();

        if (gl_LocalInvocationIndex == 0u)
        {
            gs_ParentIdx = PopNode();
        }

        groupMemoryBarrier();
        barrier();

        if (gs_ParentIdx == 0u)
        {
            break;
        }

    }

    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex == 0u)
    {
        gs_PointLightStartOffset = imageAtomicAdd(PointLightIndexCounter, int(0), gs_PointLightCount);
        imageStore(PointLightGrid, int(gs_ClusterIndex1D), uvec4(gs_PointLightStartOffset, gs_PointLightCount, 0, 0));

        gs_SpotLightStartOffset = imageAtomicAdd(SpotLightIndexCounter, int(0), gs_SpotLightCount);
        imageStore(SpotLightGrid,  int(gs_ClusterIndex1D), uvec4(gs_SpotLightStartOffset, gs_SpotLightCount, 0, 0));
    }

    groupMemoryBarrier();
    barrier();
    
    [[unroll]]
    for (int i = int(gl_LocalInvocationIndex); i < gs_PointLightCount; i += 32)
    {
        imageStore(PointLightIndexList, int(gs_PointLightStartOffset) + i, uvec4(gs_PointLightList[i], 0, 0, 0));
    }

    [[unroll]]
    for (int i = int(gl_LocalInvocationIndex); i < gs_SpotLightCount; i += 32)
    {
        imageStore(SpotLightIndexList, int(gs_SpotLightStartOffset) + i, uvec4(gs_SpotLightList[i], 0, 0, 0));
    }

}
