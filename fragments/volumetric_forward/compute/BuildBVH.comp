#include "Structures.glsl"
#pragma USE_RESOURCES BVH_RESOURCES
#pragma USE_RESOURCES SORT_RESOURCES
#pragma USE_RESOURCES VOLUMETRIC_FORWARD_LIGHTS

$SPC const uint BuildStage = 0;

const uint NUM_THREADS = 32 * 16;
const float FLT_MAX = 3.402823466e+36f;

layout(local_size_x = NUM_THREADS, local_size_y = 1, local_size_z = 1) in;

const uint NumLevelNodes[7] = {
    1,
    32,
    1024,
    32768,
    1048576,
    33554432,
    1073741824
};

const uint FirstNodeIndex[7] = {
    0,
    1,
    33,
    1057,
    33825,
    1082401,
    34636833
};

shared vec4 gs_AABBMin[NUM_THREADS];
shared vec4 gs_AABBMax[NUM_THREADS];

void LogStepReduction() {
    uint reduceIndex = 32 >> 1;
    uint mod32GroupIndex = gl_LocalInvocationIndex % 32;
    while (mod32GroupIndex < reduceIndex) {
        gs_AABBMin[gl_LocalInvocationIndex] = min(gs_AABBMin[gl_LocalInvocationIndex], gs_AABBMin[gl_LocalInvocationIndex + reduceIndex]);
        gs_AABBMax[gl_LocalInvocationIndex] = max(gs_AABBMax[gl_LocalInvocationIndex], gs_AABBMax[gl_LocalInvocationIndex + reduceIndex]);
        reduceIndex >>= 1;
    }
}

void BuildBottom() {
    uint leafIdx = gl_GlobalInvocationID.x;

    uint lightIdx;

    if (leafIdx < LightCounts.NumPointLights) {
        lightIdx = imageLoad(PointLightIndices, int(leafIdx)).r;
        gs_AABBMin[gl_LocalInvocationIndex] = PointLights.Data[lightIdx].PositionViewSpace - PointLights.Data[lightIdx].Range;
        gs_AABBMax[gl_LocalInvocationIndex] = PointLights.Data[lightIdx].PositionViewSpace + PointLights.Data[lightIdx].Range;
    }
    else {
        gs_AABBMin[gl_LocalInvocationIndex] = vec4( FLT_MAX, FLT_MAX, FLT_MAX, 1.0f);
        gs_AABBMax[gl_LocalInvocationIndex] = vec4(-FLT_MAX,-FLT_MAX,-FLT_MAX, 1.0f);
    }

    LogStepReduction();
    
    uint numLevels, nodeOffset, nodeIndex;
    if (gl_GlobalInvocationID.x % 32 == 0) {
        numLevels = BVHParams.PointLightLevels;
        nodeOffset = gl_GlobalInvocationID.x / 32;
        if (numLevels > 0 && nodeOffset < NumLevelNodes[numLevels - 1]) {
            nodeIndex = FirstNodeIndex[numLevels - 1] + nodeOffset;
            PointLightBVH.Data[nodeIndex].Min = gs_AABBMin[gl_LocalInvocationIndex];
            PointLightBVH.Data[nodeIndex].Max = gs_AABBMax[gl_LocalInvocationIndex];
        }
    }

    if (leafIdx < LightCounts.NumSpotLights) {
        lightIdx = imageLoad(SpotLightIndices, int(leafIdx)).r;
        gs_AABBMin[gl_LocalInvocationIndex] = SpotLights.Data[lightIdx].PositionViewSpace - SpotLights.Data[lightIdx].Range;
        gs_AABBMax[gl_LocalInvocationIndex] = SpotLights.Data[lightIdx].PositionViewSpace + SpotLights.Data[lightIdx].Range;
    }
    else {
        gs_AABBMin[gl_LocalInvocationIndex] = vec4( FLT_MAX, FLT_MAX, FLT_MAX, 1.0f);
        gs_AABBMax[gl_LocalInvocationIndex] = vec4(-FLT_MAX,-FLT_MAX,-FLT_MAX, 1.0f);
    }

    LogStepReduction();

    if (gl_GlobalInvocationID.x % 32 == 0) {
        numLevels = BVHParams.SpotLightLevels;
        nodeOffset = gl_GlobalInvocationID.x / 32;
        if (numLevels > 0 && nodeOffset < NumLevelNodes[numLevels - 1]) {
            nodeIndex = FirstNodeIndex[numLevels - 1] + nodeOffset;
            SpotLightBVH.Data[nodeIndex].Min = gs_AABBMin[gl_LocalInvocationIndex];
            SpotLightBVH.Data[nodeIndex].Max = gs_AABBMax[gl_LocalInvocationIndex];
        }
    }
    
}

void BuildUpper() {

    if (BVHParams.ChildLevel < BVHParams.PointLightLevels && gl_GlobalInvocationID.x < NumLevelNodes[BVHParams.ChildLevel]) {
        uint childIndex = FirstNodeIndex[BVHParams.ChildLevel] + gl_GlobalInvocationID.x;
        gs_AABBMin[childIndex] = PointLightBVH.Data[childIndex].Min;
        gs_AABBMax[childIndex] = PointLightBVH.Data[childIndex].Max;
    }
    else {
        gs_AABBMin[gl_LocalInvocationIndex] = vec4( FLT_MAX, FLT_MAX, FLT_MAX, 1.0f);
        gs_AABBMax[gl_LocalInvocationIndex] = vec4(-FLT_MAX,-FLT_MAX,-FLT_MAX, 1.0f); 
    }

    LogStepReduction();

    if (gl_GlobalInvocationID.x % 32 == 0) {
        uint nodeOffset = gl_GlobalInvocationID.x / 32;
        if (BVHParams.ChildLevel < BVHParams.PointLightLevels && nodeOffset < NumLevelNodes[BVHParams.ChildLevel - 1]) {
            uint nodeIndex = FirstNodeIndex[BVHParams.ChildLevel - 1] + nodeOffset;
            PointLightBVH.Data[nodeIndex].Min = gs_AABBMin[gl_LocalInvocationIndex];
            PointLightBVH.Data[nodeIndex].Max = gs_AABBMax[gl_LocalInvocationIndex];
        }
    }

    if (BVHParams.ChildLevel < BVHParams.SpotLightLevels && gl_GlobalInvocationID.x < NumLevelNodes[BVHParams.ChildLevel]) {
        uint childIndex = FirstNodeIndex[BVHParams.ChildLevel] + gl_GlobalInvocationID.x;
        gs_AABBMin[childIndex] = SpotLightBVH.Data[childIndex].Min;
        gs_AABBMax[childIndex] = SpotLightBVH.Data[childIndex].Max;
    }
    else {
        gs_AABBMin[gl_LocalInvocationIndex] = vec4( FLT_MAX, FLT_MAX, FLT_MAX, 1.0f);
        gs_AABBMax[gl_LocalInvocationIndex] = vec4(-FLT_MAX,-FLT_MAX,-FLT_MAX, 1.0f); 
    }

    LogStepReduction();

    if (gl_GlobalInvocationID.x % 32 == 0) {
        uint nodeOffset = gl_GlobalInvocationID.x / 32;
        if (BVHParams.ChildLevel < BVHParams.SpotLightLevels && nodeOffset < NumLevelNodes[BVHParams.ChildLevel - 1]) {
            uint nodeIndex = FirstNodeIndex[BVHParams.ChildLevel - 1] + nodeOffset;
            SpotLightBVH.Data[nodeIndex].Min = gs_AABBMin[gl_LocalInvocationIndex];
            SpotLightBVH.Data[nodeIndex].Max = gs_AABBMax[gl_LocalInvocationIndex];
        }
    }

}

void main() {
    switch (BuildStage) {
    case 0:
        BuildBottom();
        break;
    case 1:
        BuildUpper();
        break;
    }
}