#include "Structures.glsl"

#pragma USE_RESOURCES SortResources
#pragma USE_RESOURCES MergeSortResources

SPC const uint SortAlgorithm = 0;

const uint NUM_THREADS = 256;
layout (local_size_x = NUM_THREADS, local_size_y = 1u, local_size_z = 1u) in;
const uint NUM_VALUES_PER_THREAD = 8;
const uint NUM_VALUES_PER_THREAD_GROUP = NUM_THREADS * NUM_VALUES_PER_THREAD;

shared uint gs_Keys[NUM_VALUES_PER_THREAD_GROUP];
shared uint gs_Values[NUM_VALUES_PER_THREAD_GROUP];

layout(push_constant) uniform _push_constants {
    layout(offset = 0) uint NumElements;
    layout(offset = 4) uint ChunkSize;
} PushConstants;

int MergePath(int a0, int aCount, int b0, int bCount, int diag, bool useSharedMem)
{
    int begin = max(0, diag - bCount);
    int end = min(diag, aCount);

    while (begin < end)
    {
        int mid = (begin + end) >> 1;

        uint a = useSharedMem ? gs_Keys[a0 + mid] : imageLoad(InputKeys, a0 + mid).r;
        uint b = useSharedMem ? gs_Keys[b0 + diag - 1 - mid] : imageLoad(InputKeys, b0 + diag - 1 - mid).r;

        if (a < b)
        {
            begin = mid + 1;
        }
        else
        {
            end = mid;
        }

    }

    return begin;
}

void MergePathPartitionsFn()
{

    uint chunkSize = PushConstants.ChunkSize;
    // num values to sort per sort group in shader (work groups)
    uint numValuesPerSortGroup = min(chunkSize * 2, PushConstants.NumElements);

    // number of chunks to sort, followed by number of sort groups to sort all chunks we have
    uint numChunks = uint(ceil(PushConstants.NumElements / float(chunkSize)));
    uint numSortGroups = numChunks / 2;

    // total number of "partitions" per group, then we find index of work group thread is in
    uint numPartitionsPerSortGroup = uint(ceil(numValuesPerSortGroup / float(NUM_VALUES_PER_THREAD_GROUP))) + 1;
    uint sortGroup = gl_GlobalInvocationID.x / numPartitionsPerSortGroup;
    uint partitionInSortGroup = gl_GlobalInvocationID.x % numPartitionsPerSortGroup;

    // get index of partition
    uint globalPartition = (sortGroup * numPartitionsPerSortGroup) + partitionInSortGroup;
    uint maxPartitions = numSortGroups * numPartitionsPerSortGroup;

    if (globalPartition < maxPartitions)
    {
        int a0 = int(sortGroup * numValuesPerSortGroup);
        int a1 = int(min(a0 + chunkSize, PushConstants.NumElements));
        int aCount = a1 - a0;
        int b0 = a1;
        int b1 = int(min(b0 + chunkSize, PushConstants.NumElements));
        int bCount = b1 - b0;
        // number of values to sort total in this sort group
        int numValues = aCount + bCount;
        // diagonal in the merge matrix we're building
        int diag = int(min(partitionInSortGroup * NUM_VALUES_PER_THREAD_GROUP, numValues));
        // Find the right merge path for this partition
        int mergePath = MergePath(a0, aCount, b0, bCount, diag, false);

        imageStore(MergePathPartitions, int(globalPartition), ivec4(mergePath, 0, 0, 0));
    }

}

void SerialMerge(int a0, int a1, int b0, int b1, int diag, uint numValues, uint out0)
{
    uint i;
    uint aKey;
    uint bKey;
    uint aValue;
    uint bValue;

    aKey = gs_Keys[a0];
    bKey = gs_Keys[b0];
    aValue = gs_Values[a0];
    bValue = gs_Values[b0];

    [[unroll]]
    for (i = 0u; i < NUM_VALUES_PER_THREAD && diag + i < numValues; ++i)
    {
        if (b0 >= b1 || (a0 < a1 && aKey < bKey))
        {
            imageStore(OutputKeys, int(out0 + diag + i), uvec4(aKey, 0, 0, 0));
            imageStore(OutputValues, int(out0 + diag + i), uvec4(aValue, 0, 0, 0));
            ++a0;
            aKey = gs_Keys[a0];
            aValue = gs_Values[a0];
        }
        else
        {
            imageStore(OutputKeys, int(out0 + diag + i), uvec4(bKey, 0, 0, 0));
            imageStore(OutputValues, int(out0 + diag + i), uvec4(bValue, 0, 0, 0));
            ++b0;
            bKey = gs_Keys[b0];
            bValue = gs_Values[b0];
        }
    }
}

void MergeSort()
{
    uint i;
    uint key;
    uint value;

    // get size of chunks to sort, and number required
    uint chunkSize = PushConstants.ChunkSize;
    uint numChunks = uint(ceil(PushConstants.NumElements / float(chunkSize)));
    uint numSortGroups = max(numChunks / 2, 1);
    // find values per group, thread groups per group, and partitions per group
    uint numValuesPerSortGroup = min(chunkSize * 2, PushConstants.NumElements);
    uint numThreadGroupsPerSortGroup = uint(ceil(numValuesPerSortGroup / float(NUM_VALUES_PER_THREAD_GROUP)));
    uint numPartitionsPerSortGroup = numThreadGroupsPerSortGroup + 1;
    // use preceding information to find current sort-group and sub-partition of said group
    uint sortGroup = gl_WorkGroupID.x / numThreadGroupsPerSortGroup;
    uint partitionVal = gl_WorkGroupID.x % numThreadGroupsPerSortGroup;
    // use preceding to find index of what global partition to use
    uint globalPartition = (sortGroup * numPartitionsPerSortGroup) + partitionVal;

    // Load required keys about merge paths to take from textures written to previously
    int mergePath0 = imageLoad(MergePathPartitions, int(globalPartition)).r;
    int mergePath1 = imageLoad(MergePathPartitions, int(globalPartition) + 1).r;
    int diag0 = int(min(partitionVal * NUM_VALUES_PER_THREAD_GROUP, numValuesPerSortGroup));
    int diag1 = int(min((partitionVal + 1) * NUM_VALUES_PER_THREAD_GROUP, numValuesPerSortGroup));

    // Compute chunk ranges in current input set
    int chunkOffsetA0 = int(min(sortGroup * numValuesPerSortGroup, PushConstants.NumElements));
    int chunkOffsetA1 = int(min(chunkOffsetA0 + chunkSize, PushConstants.NumElements));
    int chunkSizeA = chunkOffsetA1 - chunkOffsetA0;

    int chunkOffsetB0 = chunkOffsetA1;
    int chunkOffsetB1 = int(min(chunkOffsetB0 + chunkSize, PushConstants.NumElements));
    int chunkSizeB = chunkOffsetB1 - chunkOffsetB0;

    // total number of values to be sorted
    uint numValues = chunkSizeA + chunkSizeB;

    int a0 = mergePath0;
    int a1 = mergePath1;
    int numA = min(a1 - a0, chunkSizeA);

    int b0 = diag0 - mergePath0;
    int b1 = diag1 - mergePath1;
    int numB = min(b1 - b0, chunkSizeB);

    // diagonal for this particular thread
    int diag = int(gl_LocalInvocationID * NUM_VALUES_PER_THREAD);

    // loading of keys and values into local memory
    [[unroll]]
    for (i = 0; i < NUM_VALUES_PER_THREAD; ++i)
    {
        int a = a0 + diag + int(i);
        int b = b0 + (a - a1);

        if (a < a1)
        {
            key = imageLoad(InputKeys, chunkOffsetA0 + a).r;
            value = imageLoad(InputValues, chunkOffsetA0 + a).r;
        }
        else
        {
            key = imageLoad(InputKeys, chunkOffsetB0 + b).r;
            value = imageLoad(InputValues, chunkOffsetB0 + b).r;
        }

        gs_Keys[diag + i] = key;
        gs_Values[diag + i] = value;
    }

    groupMemoryBarrier(); // memory barrier
    barrier(); // execution barrier

    int mergePath = MergePath(0, numA, numA, numB, diag, true);

    SerialMerge(mergePath, numA, numA + diag - mergePath, numA + numB, diag0 + diag, numValues, chunkOffsetA0);

}

void main()
{
    switch (SortAlgorithm)
    {
    case 0:
        MergePathPartitionsFn();
        break;
    case 1:
        MergeSort();
        break;
    }
}
