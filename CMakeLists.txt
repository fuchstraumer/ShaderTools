INCLUDE(ExternalProject)
CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
PROJECT(ShaderTools)

SET(SHADERC_SKIP_TESTS ON)
SET(SHADERC_THIRD_PARTY_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party")
SET(SHADERC_SPIRV_HEADERS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spirv-headers")
SET(SHADERC_GLSLANG_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/glslang")
SET(SHADERC_SPIRV_TOOLS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spirv-tools")
SET(SPIRV_WERROR OFF)
ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/third_party/shaderc" EXCLUDE_FROM_ALL)
ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/third_party/spirv-cross" EXCLUDE_FROM_ALL)
ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/third_party/luajit" EXCLUDE_FROM_ALL)
ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/third_party/easyloggingpp")

FILE(GLOB COMMON "${CMAKE_CURRENT_SOURCE_DIR}/src/common/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/common/*.hpp")
FILE(GLOB UTIL "${CMAKE_CURRENT_SOURCE_DIR}/src/util/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/util/*.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/util/*.hpp")
FILE(GLOB CORE "${CMAKE_CURRENT_SOURCE_DIR}/src/core/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/core/*.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/core/*.hpp")
FILE(GLOB GENERATION "${CMAKE_CURRENT_SOURCE_DIR}/src/generation/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/generation/*.hpp")
FILE(GLOB PARSER "${CMAKE_CURRENT_SOURCE_DIR}/src/parser/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/parser/*.hpp" 
    "${CMAKE_CURRENT_SOURCE_DIR}/src/parser/*.hpp")
FILE(GLOB LUA "${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.hpp")

SOURCE_GROUP("common" FILES ${COMMON})
SOURCE_GROUP("util" FILES ${UTIL})
SOURCE_GROUP("generation" FILES ${GENERATION})
SOURCE_GROUP("parser" FILES ${PARSER})
SOURCE_GROUP("core" FILES ${CORE})
SOURCE_GROUP("lua" FILES ${LUA})

FIND_PACKAGE(Vulkan REQUIRED)
OPTION(BUILD_STATIC "Build as a static library instead of a DLL. Not recommended." OFF)
IF(BUILD_STATIC) 
    ADD_LIBRARY(ShaderTools STATIC ${COMMON} ${UTIL} ${GENERATION} ${PARSER} ${LUA} ${CORE})
ELSE()
    ADD_LIBRARY(ShaderTools SHARED ${COMMON} ${UTIL} ${GENERATION} ${PARSER} ${LUA} ${CORE})
    TARGET_COMPILE_DEFINITIONS(ShaderTools PUBLIC "$<BUILD_INTERFACE:SHADERTOOLS_BUILD_DLL>" "$<INSTALL_INTERFACE:SHADERTOOLS_DLL>")
ENDIF()
SET_PROPERTY(TARGET ShaderTools PROPERTY CXX_STANDARD 17)
IF(MSVC)
TARGET_COMPILE_OPTIONS(ShaderTools PRIVATE "/bigobj" "/MP")
ENDIF()
TARGET_COMPILE_DEFINITIONS(ShaderTools PRIVATE -DSHADERTOOLS_BUILD_DLL)
TARGET_LINK_LIBRARIES(ShaderTools PRIVATE shaderc spirv-cross-core spirv-cross-glsl spirv-cross-cpp)
TARGET_LINK_LIBRARIES(ShaderTools PRIVATE liblua easyloggingpp)
TARGET_INCLUDE_DIRECTORIES(ShaderTools PUBLIC  "${CMAKE_CURRENT_SOURCE_DIR}/include" "${Vulkan_INCLUDE_DIRS}")
TARGET_INCLUDE_DIRECTORIES(ShaderTools PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/third_party/" "${CMAKE_CURRENT_SOURCE_DIR}/ext/include" 
    "${CMAKE_CURRENT_SOURCE_DIR}/third_party/luajit/src" "${CMAKE_CURRENT_SOURCE_DIR}/third_party/luabridge/Source")
    
TARGET_COMPILE_DEFINITIONS(ShaderTools PRIVATE 
    "-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS"
    "-D_SCL_SECURE_NO_WARNINGS"
    "-D_SCL_SECURE_NO_DEPRECATE"
    "-D_CRT_SECURE_NO_WARNINGS"
    "-D_CRT_SECURE_NO_DEPRECATE"
    "-D_CRT_NONSTDC_NO_WARNINGS"
    "-D_CRT_NONSTDC_NO_DEPRECATE"
    "-DNOMINMAX"
)

INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/ShaderTools/")
INSTALL(TARGETS ShaderTools RUNTIME DESTINATION "bin" LIBRARY DESTINATION "lib" ARCHIVE DESTINATION "lib")
INSTALL(TARGETS ShaderTools RUNTIME DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/")

OPTION(BUILD_TESTS "Build some test executables for shader parsing and compiliation." OFF)
IF(BUILD_TESTS)
    ADD_EXECUTABLE(ParseTest0 "${CMAKE_CURRENT_SOURCE_DIR}/tests/test.cpp")
    TARGET_COMPILE_DEFINITIONS(ParseTest0 PRIVATE "-DSHADERTOOLS_DLL")
    ADD_DEPENDENCIES(ParseTest0 ShaderTools)
    TARGET_LINK_LIBRARIES(ParseTest0 ShaderTools)
    TARGET_INCLUDE_DIRECTORIES(ParseTest0 PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/third_party/luajit/src"
    "${CMAKE_CURRENT_SOURCE_DIR}/third_party/luabridge/Source")
ENDIF()